{"ast":null,"code":"import _classCallCheck from \"/Users/stevenelbery/Desktop/Udacity/React/Demos/contacts/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/stevenelbery/Desktop/Udacity/React/Demos/contacts/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/stevenelbery/Desktop/Udacity/React/Demos/contacts/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/stevenelbery/Desktop/Udacity/React/Demos/contacts/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/stevenelbery/Desktop/Udacity/React/Demos/contacts/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/stevenelbery/Desktop/Udacity/React/Demos/contacts/src/ListContacts.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport escapeRegExp from 'escape-string-regexp';\nimport sortBy from 'sort-by';\n\nvar ListContacts =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ListContacts, _Component);\n\n  function ListContacts() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ListContacts);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ListContacts)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      query: ''\n    };\n\n    _this.updateQuery = function (query) {\n      _this.setState({\n        query: query.trim()\n      });\n    };\n\n    _this.clearQuery = function () {\n      _this.setState({\n        query: ''\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ListContacts, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          contacts = _this$props.contacts,\n          onDeleteContact = _this$props.onDeleteContact;\n      var query = this.state.query;\n      var showingContacts;\n\n      if (query) {\n        var match = new RegExp(escapeRegExp(query), 'i');\n        showingContacts = contacts.filter(function (contact) {\n          return match.test(contact.name);\n        });\n      } else {\n        showingContacts = contacts;\n      }\n\n      showingContacts.sort(sortBy('name'));\n      return React.createElement(\"div\", {\n        className: \"list-contacts\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"list-contacts-top\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        className: \"search-contacts\",\n        type: \"text\",\n        placeholder: \"Search contacts\",\n        value: query,\n        onChange: function onChange(event) {\n          return _this2.updateQuery(event.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }), React.createElement(Link, {\n        to: \"/create\",\n        className: \"add-contact\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"Add Contact\")), showingContacts.length !== contacts.length && React.createElement(\"div\", {\n        className: \"showing-contacts\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \"Now showing \", showingContacts.length, \" of \", contacts.length, \" total\"), React.createElement(\"button\", {\n        onClick: this.clearQuery,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"Show all\")), React.createElement(\"ol\", {\n        className: \"contact-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, showingContacts.map(function (contact) {\n        return React.createElement(\"li\", {\n          key: contact.id,\n          className: \"contact-list-item\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"contact-avatar\",\n          style: {\n            backgroundImage: \"url(\".concat(contact.avatarURL, \")\")\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"contact-details\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }, contact.name), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }, contact.email)), React.createElement(\"button\", {\n          onClick: function onClick() {\n            return onDeleteContact(contact);\n          },\n          className: \"contact-remove\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }, \"Remove\"));\n      })));\n    }\n  }]);\n\n  return ListContacts;\n}(Component);\n\nListContacts.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDeleteContact: PropTypes.func.isRequired\n};\nexport default ListContacts;","map":{"version":3,"sources":["/Users/stevenelbery/Desktop/Udacity/React/Demos/contacts/src/ListContacts.js"],"names":["React","Component","Link","PropTypes","escapeRegExp","sortBy","ListContacts","state","query","updateQuery","setState","trim","clearQuery","props","contacts","onDeleteContact","showingContacts","match","RegExp","filter","contact","test","name","sort","event","target","value","length","map","id","backgroundImage","avatarURL","email","propTypes","array","isRequired","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom'\nimport PropTypes from 'prop-types'\nimport escapeRegExp from 'escape-string-regexp'\nimport sortBy from 'sort-by'\n\nclass ListContacts extends Component {\n  static propTypes = {\n    contacts: PropTypes.array.isRequired,\n    onDeleteContact: PropTypes.func.isRequired\n  }\n\n  state = {\n    query: ''\n  }\n\n  updateQuery = (query) => {\n    this.setState({ query: query.trim() })\n  }\n\n  clearQuery = () => {\n    this.setState({ query: '' })\n  }\n\n  render() {\n    const { contacts, onDeleteContact } = this.props\n    const { query } = this.state\n\n    let showingContacts\n    if (query) {\n      const match = new RegExp(escapeRegExp(query), 'i')\n      showingContacts = contacts.filter((contact) => match.test(contact.name))\n    } else {\n      showingContacts = contacts\n    }\n\n    showingContacts.sort(sortBy('name'))\n\n    return (\n      <div className='list-contacts'>\n        <div className='list-contacts-top'>\n          <input\n            className='search-contacts'\n            type='text'\n            placeholder='Search contacts'\n            value={query}\n            onChange={(event) => this.updateQuery(event.target.value)}\n          />\n          <Link\n            to='/create'\n            className='add-contact'\n          >Add Contact</Link>\n        </div>\n\n        {showingContacts.length !== contacts.length && (\n          <div className='showing-contacts'>\n            <span>Now showing {showingContacts.length} of {contacts.length} total</span>\n            <button onClick={this.clearQuery}>Show all</button>\n          </div>\n        )}\n\n        <ol className='contact-list'>\n          {showingContacts.map((contact) => (\n            <li key={contact.id} className='contact-list-item'>\n              <div className='contact-avatar' style={{\n                backgroundImage: `url(${contact.avatarURL})`\n              }}/>\n              <div className='contact-details'>\n                <p>{contact.name}</p>\n                <p>{contact.email}</p>\n              </div>\n              <button onClick={() => onDeleteContact(contact)} className='contact-remove'>\n                Remove\n              </button>\n            </li>\n          ))}\n        </ol>\n      </div>\n    )\n  }\n}\n\nexport default ListContacts\n"]},"metadata":{},"sourceType":"module"}